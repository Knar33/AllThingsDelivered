@model AllThingsDelivered.Models.RegisterModel
@{
    ViewBag.Title = "Register";
    var months = (new[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }).Select(x => new SelectListItem { Text = x, Value = x });
    var yearsInt = new int[6];
    int j = DateTime.Now.Year;
    for (int i = 0; i < 6; i++)
    {
        yearsInt[i] = j + i;

    }
    var years = yearsInt.Select(x => new SelectListItem { Text = x.ToString(), Value = x.ToString() });
}

@if (TempData["Errors"] != null)
{
    foreach (string s in (IEnumerable<string>)TempData["Errors"])
    {
        <div>Error: @s</div>
    }
}
@using (Html.BeginForm("Register", "Account", FormMethod.Post, new { id = "payment-form" }))
{
    @Html.AntiForgeryToken();
    <div class="form-group">
        @Html.LabelFor(m => m.username, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.username, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.username)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.firstname, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.firstname, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.firstname)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.lastname, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.lastname, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.lastname)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.phone, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.phone, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.phone)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.password1, new { @class = "control-label" })
        @Html.PasswordFor(m => m.password1, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.password1)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.password2, new { @class = "control-label" })
        @Html.PasswordFor(m => m.password2, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.password2)
    </div>

    <h3>Address</h3>
    <div class="form-group">
        @Html.LabelFor(m => m.line1, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.line1, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.line1)
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.line2, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.line2, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.line2)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.city, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.city, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.city)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.state, new { @class = "control-label" })
        <br />
        @Html.DropDownListFor(m => m.state, Model.stateList)
        @Html.ValidationMessageFor(m => m.state)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.postalcode, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.postalcode, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.postalcode)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.country, new { @class = "control-label" })
        <br />
        @Html.DropDownListFor(m => m.country, Model.countryList)
        @Html.ValidationMessageFor(m => m.country)
    </div>

    <section>
        <div class="bt-drop-in-wrapper">
            <div id="bt-dropin"></div>
        </div>
    </section>
    <input id="nonce" name="payment_method_nonce" type="hidden" />

    <input type="submit" value="Create Account" />
}

<script src="https://js.braintreegateway.com/web/dropin/1.7.0/js/dropin.min.js"></script>
<script>
    var client_token = "@ViewBag.ClientToken";
    var form = document.querySelector('#payment-form');

    braintree.dropin.create({
        authorization: client_token,
        container: '#bt-dropin',
        paypal: {
            flow: 'vault',
            currency: 'USD'
        },
        paypalCredit: {
            flow: 'vault',
            currency: 'USD'
        }
    }, function (createErr, instance) {
        form.addEventListener('submit', function (event) {
            event.preventDefault();

            instance.requestPaymentMethod(function (err, payload) {
                if (err) {
                    console.log('Error', err);
                    return;
                }

                // Add the nonce to the form and submit
                document.querySelector('#nonce').value = payload.nonce;
                form.submit();
            });
        });
    });

    var checkout = new Demo({
        formID: "payment-form"
    });
</script>